# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class ItemActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Item]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Item.prisma().query_raw(
            'SELECT * FROM Item WHERE id = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Item
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Item.prisma().query_first(
            'SELECT * FROM Item WHERE created_at = $1',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ItemCreateInput,
        include: Optional[types.ItemInclude] = None
    ) -> _PrismaModelT:
        """Create a new Item record.

        Parameters
        ----------
        data
            Item record data
        include
            Specifies which relations should be loaded on the returned Item model

        Returns
        -------
        prisma.models.Item
            The created Item record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Item record from just the required fields
        item = await Item.prisma().create(
            data={
                # data to create a Item record
                'name': 'dhheabfhf',
                'price': 7953889008,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ItemCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Item records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Item record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Item.prisma().create_many(
            data=[
                {
                    # data to create a Item record
                    'name': 'bbehjachib',
                    'price': 24420185688,
                },
                {
                    # data to create a Item record
                    'name': 'dgiiaaijj',
                    'price': 18096359424,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ItemWhereUniqueInput,
        include: Optional[types.ItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Item record.

        Parameters
        ----------
        where
            Item filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Item model

        Returns
        -------
        prisma.models.Item
            The deleted Item record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        item = await Item.prisma().delete(
            where={
                'id': 'eigcfgbif',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def find_unique(
        self,
        where: types.ItemWhereUniqueInput,
        include: Optional[types.ItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Item record.

        Parameters
        ----------
        where
            Item filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Item model

        Returns
        -------
        prisma.models.Item
            The found Item record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        item = await Item.prisma().find_unique(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_unique_or_raise(
        self,
        where: types.ItemWhereUniqueInput,
        include: Optional[types.ItemInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Item record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Item filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Item model

        Returns
        -------
        prisma.models.Item
            The found Item record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        item = await Item.prisma().find_unique_or_raise(
            where={
                'id': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemWhereInput] = None,
        cursor: Optional[types.ItemWhereUniqueInput] = None,
        include: Optional[types.ItemInclude] = None,
        order: Optional[Union[types.ItemOrderByInput, List[types.ItemOrderByInput]]] = None,
        distinct: Optional[List[types.ItemScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Item records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Item records returned
        skip
            Ignore the first N results
        where
            Item filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Item model
        order
            Order the returned Item records by any field
        distinct
            Filter Item records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Item]
            The list of all Item records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Item records
        items = await Item.prisma().find_many(take=10)

        # find the first 5 Item records ordered by the name field
        items = await Item.prisma().find_many(
            take=5,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ItemWhereInput] = None,
        cursor: Optional[types.ItemWhereUniqueInput] = None,
        include: Optional[types.ItemInclude] = None,
        order: Optional[Union[types.ItemOrderByInput, List[types.ItemOrderByInput]]] = None,
        distinct: Optional[List[types.ItemScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Item record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Item filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Item model
        order
            Order the returned Item records by any field
        distinct
            Filter Item records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Item
            The first Item record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Item record ordered by the price field
        item = await Item.prisma().find_first(
            skip=1,
            order={
                'price': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ItemWhereInput] = None,
        cursor: Optional[types.ItemWhereUniqueInput] = None,
        include: Optional[types.ItemInclude] = None,
        order: Optional[Union[types.ItemOrderByInput, List[types.ItemOrderByInput]]] = None,
        distinct: Optional[List[types.ItemScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Item record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Item filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Item model
        order
            Order the returned Item records by any field
        distinct
            Filter Item records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Item
            The first Item record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Item record ordered by the id field
        item = await Item.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update(
        self,
        data: types.ItemUpdateInput,
        where: types.ItemWhereUniqueInput,
        include: Optional[types.ItemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Item record.

        Parameters
        ----------
        data
            Item record data specifying what to update
        where
            Item filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Item model

        Returns
        -------
        prisma.models.Item
            The updated Item record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        item = await Item.prisma().update(
            where={
                'id': 'biabhbdai',
            },
            data={
                # data to update the Item record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    async def upsert(
        self,
        where: types.ItemWhereUniqueInput,
        data: types.ItemUpsertInput,
        include: Optional[types.ItemInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Item filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Item model

        Returns
        -------
        prisma.models.Item
            The created or updated Item record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        item = await Item.prisma().upsert(
            where={
                'id': 'idghgaicb',
            },
            data={
                'create': {
                    'id': 'idghgaicb',
                    'name': 'dgiiaaijj',
                    'price': 18096359424,
                },
                'update': {
                    'name': 'dgiiaaijj',
                    'price': 18096359424,
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    async def update_many(
        self,
        data: types.ItemUpdateManyMutationInput,
        where: types.ItemWhereInput,
    ) -> int:
        """Update multiple Item records

        Parameters
        ----------
        data
            Item data to update the selected Item records to
        where
            Filter to select the Item records to update

        Returns
        -------
        int
            The total number of Item records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Item records
        total = await Item.prisma().update_many(
            data={
                'created_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemWhereInput] = None,
        cursor: Optional[types.ItemWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Item records present in the database

        Parameters
        ----------
        select
            Select the Item fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Item filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ItemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Item.prisma().count()

        # results: prisma.types.ItemCountAggregateOutput
        results = await Item.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ItemCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemWhereInput] = None,
        cursor: Optional[types.ItemWhereUniqueInput] = None,
    ) -> types.ItemCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ItemCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ItemWhereInput] = None,
        cursor: Optional[types.ItemWhereUniqueInput] = None,
    ) -> Union[int, types.ItemCountAggregateOutput]:
        """Count the number of Item records present in the database

        Parameters
        ----------
        select
            Select the Item fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Item filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ItemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Item.prisma().count()

        # results: prisma.types.ItemCountAggregateOutput
        results = await Item.prisma().count(
            select={
                '_all': True,
                'price': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ItemCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ItemWhereInput] = None
    ) -> int:
        """Delete multiple Item records.

        Parameters
        ----------
        where
            Optional Item filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Item records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Item records
        total = await Item.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ItemScalarFieldKeys'],
        *,
        where: Optional['types.ItemWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ItemAvgAggregateInput'] = None,
        sum: Optional['types.ItemSumAggregateInput'] = None,
        min: Optional['types.ItemMinAggregateInput'] = None,
        max: Optional['types.ItemMaxAggregateInput'] = None,
        having: Optional['types.ItemScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ItemCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ItemScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ItemScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ItemGroupByOutput']:
        """Group Item records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Item fields to group records by
        where
            Item filter to select records
        take
            Limit the maximum number of Item records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ItemGroupByOutput]
            A list of dictionaries representing the Item record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Item records by id values
        # and count how many records are in each group
        results = await Item.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models